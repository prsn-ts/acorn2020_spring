<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 
		spring bean container에서 관리되는 객체를 정의하는 문서로 상당히 중요한 xml 문서
	 -->
	
	<!-- 
		JNDI 데이터 소스 객체 얻어오는 설정   
		Servers/context.xml 에 설정된 oracle 접속정보 가 있어야 된다. 
		 
		<Resource name="jdbc/myoracle" auth="Container"
              type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
              url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
              username="scott" password="tiger" maxTotal="20" maxIdle="10"
              maxWaitMillis="-1"/>    		
	-->
	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	<!-- 
		위는 아래의 코드와 같다. dataSource는 DB 관리를 위한 커넥션 객체와 같다.
		dataSource = new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle");
	 -->
	
	
	<!-- SqlSessionFactory 객체 -->
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation"
	value="classpath:com/gura/spring05/mybatis/Configuration.xml"/>
	</beans:bean>
	<!-- 
		sessionFactory=new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource);
		sessionFactory.setConfigLocation("classpath:com/gura/xxx");
	 -->
	

	<!-- 
		SqlSession 인터페이스를 구현한 
		SqlSessionTemplate(SqlSession) 객체 
		Dao 가 의존하는 객체 
	-->
	<!-- 
		MyBatis로 DB 연동을 위한 핵심 의존 객체는  SqlSessionTemplate
		필요한 핵심 객체는 직접 생성하지 않고(유지보수를 위해) Spring에서 관리할 수 있도록 하고
		쓰려고 할 때는 Spring에서 빌려서 쓴다.
		
		Spring Bean Container 에서는 이렇게 핵심 의존 객체를 bean으로 관리하다가 필요해지면 이 객체를 사용할 곳에 주입(injection)하는데
		이것을 의존 주입(Dependency Injection) 이라고 부른다.
		
		class SqlSessionTemplate implements SqlSession{} //SqlSession를 구현한 SqlSessionTemplate 클래스
	 -->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	<!-- 
		위에 beans:bean에 해당하는 코드와 아래 코드는 동일한 의미.
		new SqlSessionTemplate(sessionFactory);
	 -->
	 
	<!-- Spring Transaction Manager 설정 -->
	<beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource"></beans:property>
	</beans:bean>
	
	<!-- 위 문장은 아래의 소스코드의 의미랑 같다.
		txManager = new DataSourceTransactionManager();
		txManager.setDataSource(dataSource);
	-->
	
	<!-- @Transactional 어노테이션으로 트랜잭션을 관리할 수 있도록 설정 -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"/>
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring05" />
	
	<!--  Multipart 폼 전송 처리를 위한 bean 설정(multipart 해결사 객체) -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="102400000"/> <!-- 100MB(대략 100메가바이트) -->
	</beans:bean>
	
	<!-- 
		bean 의 이름을 이용해서 view 로 이동할 수 있도록 설정
		setOrder(0) 는 0 순위로 찾아 가겠다는 의미
		0 순위로 찾아서 없으면 views 폴더 안에서 jsp 페이지를 찾게 된다.(value 속성을 이용해 우선 순위를 정할 수 있다)
	 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"/>
	</beans:bean>
	
	<!-- 어노테이션 기반으로 aop 적용 가능하게 하기 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans:beans>
