{"version":3,"sources":["App10_Ajax6_1.js","serviceWorker.js","index.js"],"names":["App10_Ajax6","useState","id","pwd","loginId","formData","setFormData","changed","e","name","target","value","onSubmit","preventDefault","fetch","method","headers","body","qs","stringify","then","res","json","data","console","log","isSuccess","alert","catch","err","onChange","type","placeholder","JSON","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4MA0FeA,EArFG,WAAK,IAAD,EAEYC,mBAAS,CACnCC,GAAG,GACHC,IAAI,GACJC,QAAQ,OALM,mBAEXC,EAFW,KAEDC,EAFC,KAQZC,EAAQ,SAACC,GAEX,IAAIC,EAAKD,EAAEE,OAAOD,KAEdE,EAAMH,EAAEE,OAAOC,MACnBL,EAAY,eACLD,EADI,eAENI,EAAME,MAgDf,OACI,6BAKMN,EAASD,SACV,2BAAG,gCAASC,EAASD,SAArB,sCAED,6EACA,0BAAMQ,SAtDD,SAACJ,GAEVA,EAAEK,iBACFC,MAAM,qDAAsD,CACxDC,OAAO,OACPC,QAAQ,CAAC,eAAe,qCACxBC,KAAMC,IAAGC,UAAUd,KAEtBe,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACTA,EAAKG,UACJpB,EAAY,eACLD,EADI,CAEPD,QAAQmB,EAAKrB,MAGjByB,MAAM,yFAGbC,OAAM,SAAAC,GACHL,QAAQC,IAAII,QAkCR,2BAAOC,SAAUvB,EAASE,KAAK,KAAKsB,KAAK,OAAOC,YAAY,0BAC5D,2BAAOF,SAAUvB,EAASE,KAAK,MAAMsB,KAAK,WAAWC,YAAY,gCACjE,4BAAQD,KAAK,UAAb,uBAEJ,2BAAIE,KAAKd,UAAUd,IACnB,2BAAIa,IAAGC,UAAUd,IACjB,4BAAQ6B,QAnCH,WAETpB,MAAM,uDACLM,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACTA,EAAKG,YACJpB,EAAY,eACLD,EADI,CAEPD,QAAQmB,EAAKrB,MAEjByB,MAAM,iEAGbC,OAAM,SAAAC,GACHL,QAAQC,IAAII,QAoBZ,8BCzEQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.4e19204c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n// >yarn add query-string 해서 설치후에 사용할수 있다. \r\nimport qs from 'query-string';\r\n\r\n//다른 서버에 저장되있는 로그인 정보를 통해 로그인 및 로그아웃을 ajax 요청하는 예제\r\nconst App10_Ajax6=()=>{\r\n\r\n    const [formData, setFormData]=useState({\r\n        id:'',\r\n        pwd:'',\r\n        loginId:null\r\n    });\r\n\r\n    const changed=(e)=>{\r\n        //이벤트가 일어난 input 요소의 name 속성의 값 ( id or pwd ) 읽어오기 \r\n        let name=e.target.name;\r\n        //이벤트가 일어난 input 요소에 입력한 value 값\r\n        let value=e.target.value;\r\n        setFormData({\r\n            ...formData,\r\n            [name]:value\r\n        });\r\n    };\r\n\r\n    const submit=(e)=>{\r\n        //폼 전송 막기 \r\n        e.preventDefault();\r\n        fetch(\"http://localhost:8888/spring05/users/ajax_login.do\", {\r\n            method:\"POST\",\r\n            headers:{\"Content-Type\":\"application/x-www-form-urlencoded\"},\r\n            body: qs.stringify(formData)\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data);\r\n            if(data.isSuccess){\r\n                setFormData({\r\n                    ...formData,\r\n                    loginId:data.id\r\n                });\r\n            }else{\r\n                alert(\"아이디 혹은 비밀번호가 틀려요!\");\r\n            } \r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        });\r\n\r\n    };\r\n\r\n    const logout=()=>{\r\n        //ajax로 로그아웃 요청을 한다.\r\n        fetch(\"http://localhost:8888/spring05/users/ajax_logout.do\")\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data);\r\n            if(data.isSuccess){\r\n                setFormData({\r\n                    ...formData,\r\n                    loginId:data.id\r\n                });\r\n                alert(\"로그 아웃 되었습니다.\")\r\n            }\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            {/* \r\n                formData 오브젝트 안에 loginId 인덱스가 존재하면 p요소 출력하고\r\n                loginId 인덱스가 존재하지 않으면 p요소 출력 X\r\n            */}\r\n            { formData.loginId &&\r\n             <p><strong>{formData.loginId}</strong>님 로그인중...</p>\r\n            }\r\n            <h1>로그인 폼 입니다.</h1>\r\n            <form onSubmit={submit}>\r\n                <input onChange={changed} name=\"id\" type=\"text\" placeholder=\"아이디...\"/>\r\n                <input onChange={changed} name=\"pwd\" type=\"password\" placeholder=\"비밀번호...\"/>\r\n                <button type=\"submit\">로그인</button>\r\n            </form>\r\n            <p>{JSON.stringify(formData)}</p>\r\n            <p>{qs.stringify(formData)}</p>\r\n            <button onClick={logout}>로그아웃</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App10_Ajax6;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App10_Ajax6_1';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}