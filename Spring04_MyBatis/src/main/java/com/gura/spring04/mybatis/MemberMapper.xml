<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member"> <!-- 여러 mapper 들을 식별할 수 있는 namespace의 속성값. -->
	<!-- 
		sql문을 xml로 작성해놓고 필요할 때 불러다가 쓰도록 정리
		select 된 결과를 가져오기도 쉽고 바인딩하는 과정도 간편하다.(익숙해지기만 하면..)
	 -->
	 <!-- 
	 	하나의 mapper 안에서 여러개의 insert가 있을 수 있어서 특정한 insert를 선택하기위해 id값으로 구별한다.
	 	또한, parameterType 속성의 값으로 이 insert문 수행에 있어 연관된 Dto를 알려주기위해서  "com.gura.spring04.member.dto.MemberDto" 이런식으로 지정함.
	  -->
	<insert id="insert" parameterType="com.gura.spring04.member.dto.MemberDto"> 
		INSERT INTO member
		(num, name, addr)
		VALUES(member_seq.NEXTVAL, #{name}, #{addr}) <!-- #{} 부분은 MyBatis에서 사용하는 문법(?)이고 MemberDto에 있는 필드값의 바인딩 처리를 담당. 단, #{} 중괄호안에 들어가는 값은 MemberDto 필드의 이름이 들어가야한다. -->
	</insert>
	
	<update id="update" parameterType="com.gura.spring04.member.dto.MemberDto">
		<!-- #{} 부분은 MyBatis에서 사용하는 문법(?)이고 MemberDto에 있는 필드값의 바인딩 처리를 담당. 단, #{} 중괄호안에 들어가는 값은 MemberDto 필드의 이름이 들어가야한다. -->
		UPDATE member
		SET name = #{name}, addr= #{addr}
		WHERE num= #{num}
	</update>
	
	<delete id="delete" parameterType="int"> 
		DELETE FROM member
		WHERE num = #{num} <!-- 파라미터 값이 하나밖에 없다면 #{}의 중괄호 안에는 이름을 마음대로 정할 수 있다.(마음대로 이름을 지어도 바인딩 처리가 가능하다) -->
	</delete>
	
	<!-- 
		resultType은 셀렉트된 결과를 어떤 타입으로 담을지를 결정(여기서는 MemberDto)
		또한 DB의 칼럼명(num, name, addr)과 MemberDto의 필드명이 같아야 결과값이 MemberDto에 담긴다
		
		parameterType의 값은 여기서는 MemberDao의 getData 함수의 파라미터(매개변수)의 타입을 의미한다. 즉, int
	 -->
	<select id="getData" parameterType="int" resultType="com.gura.spring04.member.dto.MemberDto"> 
		SELECT num,name,addr
		FROM member
		WHERE num = #{num}
	</select>
	
	<select id="getList" resultType="com.gura.spring04.member.dto.MemberDto">
		SELECT num, name, addr
		FROM member
		ORDER BY num ASC
	</select>
</mapper>